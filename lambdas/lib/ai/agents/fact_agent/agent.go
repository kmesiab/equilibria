// Package fact_agent provides the implementation of the FactAgent, which is
// designed to process input strings and generate factual completions based on
// its backstory. The FactAgent is the first agent and serves as the example
// model for other agents. These agents work by utilizing a completion service
// interface to generate responses based on predefined roles and backstories.
// The FactAgent, in particular, focuses on extracting and reasoning about
// facts from the input text. It uses the CompletionServiceInterface to get
// completions and then cleans and parses the responses. The agents are
// designed to be modular and extendable, allowing for the addition of new
// agents with different roles and functionalities. The FactAgent includes
// methods for processing input (Do), cleaning responses (CleanAgentResponse),
// and parsing JSON responses (ParseResponse).
package fact_agent

import (
	"encoding/json"
	"strings"

	"github.com/kmesiab/equilibria/lambdas/lib/ai"
	"github.com/kmesiab/equilibria/lambdas/lib/ai/agents"
)

const role = "Fact Finder"

type FactAgentFact struct {
	Fact      string `json:"fact"`
	Reasoning string `json:"reasoning"`
}

type FactAgent struct {
	agents.AIAgent
	CompletionSvc ai.CompletionServiceInterface
}

func NewFactAgent(completionSvc ai.CompletionServiceInterface) *FactAgent {
	a := &FactAgent{
		CompletionSvc: completionSvc,
	}

	a.Role = role
	a.Backstory = getBackStory()
	a.Tools = []agents.AgentTool{}

	a.Memory = false
	a.AllowDelegation = false

	return a
}

// Do processes the input string using the CompletionServiceInterface to generate a completion
// based on the FactAgent's backstory. It then cleans the response and returns it.
//
// Parameters:
//   - input: A string representing the input to be processed by the FactAgent.
//
// Returns:
//   - string: The cleaned response generated by the CompletionServiceInterface.
//   - error: An error object if the completion service fails, otherwise nil.
func (a *FactAgent) Do(input string) (string, error) {
	completion, err := a.CompletionSvc.GetCompletion(input, a.Backstory, nil)

	if err != nil {
		return "", err
	}

	return a.CleanAgentResponse(a.CompletionSvc.CleanCompletionText(completion)), nil
}

// ParseResponse parses the OpenAI response from the FactAgent
// into a slice of FactAgentFact.
//
// Parameters:
//   - input: A JSON string representing the response from the OpenAI service.
//
// Returns:
//   - *[]FactAgentFact: A pointer to a slice of FactAgentFact structs parsed from the input JSON string.
//   - error: An error object if the parsing fails, otherwise nil.
func ParseResponse(input string) (*[]FactAgentFact, error) {

	var (
		err   error
		facts *[]FactAgentFact
	)

	if err = json.Unmarshal([]byte(input), &facts); err != nil {

		return nil, err
	}

	return facts, nil
}

// CleanAgentResponse removes specific markdown formatting from the input string
// and trims any leading or trailing whitespace.
//
// This method is used to clean the response text generated by the CompletionServiceInterface,
// ensuring that it is in a plain text format without any markdown artifacts.
//
// Parameters:
//   - input: A string representing the response text to be cleaned.
//
// Returns:
//   - string: The cleaned response text with markdown formatting removed and whitespace trimmed.
func (a *FactAgent) CleanAgentResponse(input string) string {
	input = strings.ReplaceAll(input, "```json", "")
	input = strings.ReplaceAll(input, "```", "")
	return strings.TrimSpace(input)
}
